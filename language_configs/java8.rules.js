// Configuration for each possible node type.
// Currently, the only option is 'collapse', which is used by the collapse transformer.

module.exports = {
    // Non-terminals:
    'literal': {},
    'type': {},
    'primitiveType': {},
    'numericType': {},
    'integralType': {},
    'floatingPointType': {},
    'referenceType': {},
    'classOrInterfaceType': {},
    'classType': {},
    'classType_lf_classOrInterfaceType': {},
    'classType_lfno_classOrInterfaceType': {},
    'interfaceType': {},
    'interfaceType_lf_classOrInterfaceType': {},
    'interfaceType_lfno_classOrInterfaceType': {},
    'typeVariable': {},
    'arrayType': {},
    'dims': {},
    'typeParameter': {},
    'typeParameterModifier': {},
    'typeBound': {},
    'additionalBound': {},
    'typeArguments': {},
    'typeArgumentList': {},
    'typeArgument': {},
    'wildcard': {},
    'wildcardBounds': {},
    'packageName': {},
    'typeName': {},
    'packageOrTypeName': {},
    'expressionName': {},
    'methodName': {},
    'ambiguousName': {},
    'compilationUnit': {},
    'packageDeclaration': {},
    'packageModifier': {},
    'importDeclaration': {},
    'singleTypeImportDeclaration': {},
    'typeImportOnDemandDeclaration': {},
    'singleStaticImportDeclaration': {},
    'staticImportOnDemandDeclaration': {},
    'typeDeclaration': {},
    'classDeclaration': {},
    'normalClassDeclaration': {},
    'classModifier': {},
    'typeParameters': {},
    'typeParameterList': {},
    'superclass': {},
    'superinterfaces': {},
    'interfaceTypeList': {},
    'classBody': {},
    'classBodyDeclaration': {},
    'classMemberDeclaration': {},
    'fieldDeclaration': {},
    'fieldModifier': {},
    'variableDeclaratorList': {},
    'variableDeclarator': {},
    'variableDeclaratorId': {},
    'variableInitializer': {},
    'unannType': {},
    'unannPrimitiveType': {},
    'unannReferenceType': {},
    'unannClassOrInterfaceType': {},
    'unannClassType': {},
    'unannClassType_lf_unannClassOrInterfaceType': {},
    'unannClassType_lfno_unannClassOrInterfaceType': {},
    'unannInterfaceType': {},
    'unannInterfaceType_lf_unannClassOrInterfaceType': {},
    'unannInterfaceType_lfno_unannClassOrInterfaceType': {},
    'unannTypeVariable': {},
    'unannArrayType': {},
    'methodDeclaration': {},
    'methodModifier': {},
    'methodHeader': {},
    'result': {},
    'methodDeclarator': {},
    'formalParameterList': {},
    'formalParameters': {},
    'formalParameter': {},
    'variableModifier': {},
    'lastFormalParameter': {},
    'receiverParameter': {},
    'throws_': {},
    'exceptionTypeList': {},
    'exceptionType': {},
    'methodBody': {},
    'instanceInitializer': {},
    'staticInitializer': {},
    'constructorDeclaration': {},
    'constructorModifier': {},
    'constructorDeclarator': {},
    'simpleTypeName': {},
    'constructorBody': {},
    'explicitConstructorInvocation': {},
    'enumDeclaration': {},
    'enumBody': {},
    'enumConstantList': {},
    'enumConstant': {},
    'enumConstantModifier': {},
    'enumBodyDeclarations': {},
    'interfaceDeclaration': {},
    'normalInterfaceDeclaration': {},
    'interfaceModifier': {},
    'extendsInterfaces': {},
    'interfaceBody': {},
    'interfaceMemberDeclaration': {},
    'constantDeclaration': {},
    'constantModifier': {},
    'interfaceMethodDeclaration': {},
    'interfaceMethodModifier': {},
    'annotationTypeDeclaration': {},
    'annotationTypeBody': {},
    'annotationTypeMemberDeclaration': {},
    'annotationTypeElementDeclaration': {},
    'annotationTypeElementModifier': {},
    'defaultValue': {},
    'annotation': {},
    'normalAnnotation': {},
    'elementValuePairList': {},
    'elementValuePair': {},
    'elementValue': {},
    'elementValueArrayInitializer': {},
    'elementValueList': {},
    'markerAnnotation': {},
    'singleElementAnnotation': {},
    'arrayInitializer': {},
    'variableInitializerList': {},
    'block': {},
    'blockStatements': {},
    'blockStatement': {},
    'localVariableDeclarationStatement': {},
    'localVariableDeclaration': {},
    'statement': {},
    'statementNoShortIf': {},
    'statementWithoutTrailingSubstatement': {},
    'emptyStatement': {},
    'labeledStatement': {},
    'labeledStatementNoShortIf': {},
    'expressionStatement': {},
    'statementExpression': {},
    'ifThenStatement': {},
    'ifThenElseStatement': {},
    'ifThenElseStatementNoShortIf': {},
    'assertStatement': {},
    'switchStatement': {},
    'switchBlock': {},
    'switchBlockStatementGroup': {},
    'switchLabels': {},
    'switchLabel': {},
    'enumConstantName': {},
    'whileStatement': {},
    'whileStatementNoShortIf': {},
    'doStatement': {},
    'forStatement': {},
    'forStatementNoShortIf': {},
    'basicForStatement': {},
    'basicForStatementNoShortIf': {},
    'forInit': {},
    'forUpdate': {},
    'statementExpressionList': {},
    'enhancedForStatement': {},
    'enhancedForStatementNoShortIf': {},
    'breakStatement': {},
    'continueStatement': {},
    'returnStatement': {},
    'throwStatement': {},
    'synchronizedStatement': {},
    'tryStatement': {},
    'catches': {},
    'catchClause': {},
    'catchFormalParameter': {},
    'catchType': {},
    'finally_': {},
    'tryWithResourcesStatement': {},
    'resourceSpecification': {},
    'resourceList': {},
    'resource': {},
    'primary': {},
    'primaryNoNewArray': {},
    'primaryNoNewArray_lf_arrayAccess': {},
    'primaryNoNewArray_lfno_arrayAccess': {},
    'primaryNoNewArray_lf_primary': {},
    'primaryNoNewArray_lf_primary_lf_arrayAccess_lf_primary': {},
    'primaryNoNewArray_lf_primary_lfno_arrayAccess_lf_primary': {},
    'primaryNoNewArray_lfno_primary': {},
    'primaryNoNewArray_lfno_primary_lf_arrayAccess_lfno_primary': {},
    'primaryNoNewArray_lfno_primary_lfno_arrayAccess_lfno_primary': {},
    'classInstanceCreationExpression': {},
    'classInstanceCreationExpression_lf_primary': {},
    'classInstanceCreationExpression_lfno_primary': {},
    'typeArgumentsOrDiamond': {},
    'fieldAccess': {},
    'fieldAccess_lf_primary': {},
    'fieldAccess_lfno_primary': {},
    'arrayAccess': {},
    'arrayAccess_lf_primary': {},
    'arrayAccess_lfno_primary': {},
    'methodInvocation': {},
    'methodInvocation_lf_primary': {},
    'methodInvocation_lfno_primary': {},
    'argumentList': {},
    'methodReference': {},
    'methodReference_lf_primary': {},
    'methodReference_lfno_primary': {},
    'arrayCreationExpression': {},
    'dimExprs': {},
    'dimExpr': {},
    'constantExpression': {},
    'expression': {},
    'lambdaExpression': {},
    'lambdaParameters': {},
    'inferredFormalParameterList': {},
    'lambdaBody': {},
    'assignmentExpression': {},
    'assignment': {},
    'leftHandSide': {},
    'assignmentOperator': {},
    'conditionalExpression': {},
    'conditionalOrExpression': {},
    'conditionalAndExpression': {},
    'inclusiveOrExpression': {},
    'exclusiveOrExpression': {},
    'andExpression': {},
    'equalityExpression': {},
    'relationalExpression': {},
    'shiftExpression': {},
    'additiveExpression': {},
    'multiplicativeExpression': {},
    'unaryExpression': {},
    'preIncrementExpression': {},
    'preDecrementExpression': {},
    'unaryExpressionNotPlusMinus': {},
    'postfixExpression': {},
    'postIncrementExpression': {},
    'postIncrementExpression_lf_postfixExpression': {},
    'postDecrementExpression': {},
    'postDecrementExpression_lf_postfixExpression': {},
    'castExpression': {},

    // Terminals:
    '._EPSILON': {},
    '._EOF': {},
    '._INVALID': {},
    '.ABSTRACT': {},
    '.ASSERT': {},
    '.BOOLEAN': {},
    '.BREAK': {},
    '.BYTE': {},
    '.CASE': {},
    '.CATCH': {},
    '.CHAR': {},
    '.CLASS': {},
    '.CONST': {},
    '.CONTINUE': {},
    '.DEFAULT': {},
    '.DO': {},
    '.DOUBLE': {},
    '.ELSE': {},
    '.ENUM': {},
    '.EXTENDS': {},
    '.FINAL': {},
    '.FINALLY': {},
    '.FLOAT': {},
    '.FOR': {},
    '.IF': {},
    '.GOTO': {},
    '.IMPLEMENTS': {},
    '.IMPORT': {},
    '.INSTANCEOF': {},
    '.INT': {},
    '.INTERFACE': {},
    '.LONG': {},
    '.NATIVE': {},
    '.NEW': {},
    '.PACKAGE': {},
    '.PRIVATE': {},
    '.PROTECTED': {},
    '.PUBLIC': {},
    '.RETURN': {},
    '.SHORT': {},
    '.STATIC': {},
    '.STRICTFP': {},
    '.SUPER': {},
    '.SWITCH': {},
    '.SYNCHRONIZED': {},
    '.THIS': {},
    '.THROW': {},
    '.THROWS': {},
    '.TRANSIENT': {},
    '.TRY': {},
    '.VOID': {},
    '.VOLATILE': {},
    '.WHILE': {},
    '.IntegerLiteral': {},
    '.FloatingPointLiteral': {},
    '.BooleanLiteral': {},
    '.CharacterLiteral': {},
    '.StringLiteral': {},
    '.NullLiteral': {},
    '.LPAREN': {},
    '.RPAREN': {},
    '.LBRACE': {},
    '.RBRACE': {},
    '.LBRACK': {},
    '.RBRACK': {},
    '.SEMI': {},
    '.COMMA': {},
    '.DOT': {},
    '.ASSIGN': {},
    '.GT': {},
    '.LT': {},
    '.BANG': {},
    '.TILDE': {},
    '.QUESTION': {},
    '.COLON': {},
    '.EQUAL': {},
    '.LE': {},
    '.GE': {},
    '.NOTEQUAL': {},
    '.AND': {},
    '.OR': {},
    '.INC': {},
    '.DEC': {},
    '.ADD': {},
    '.SUB': {},
    '.MUL': {},
    '.DIV': {},
    '.BITAND': {},
    '.BITOR': {},
    '.CARET': {},
    '.MOD': {},
    '.ARROW': {},
    '.COLONCOLON': {},
    '.ADD_ASSIGN': {},
    '.SUB_ASSIGN': {},
    '.MUL_ASSIGN': {},
    '.DIV_ASSIGN': {},
    '.AND_ASSIGN': {},
    '.OR_ASSIGN': {},
    '.XOR_ASSIGN': {},
    '.MOD_ASSIGN': {},
    '.LSHIFT_ASSIGN': {},
    '.RSHIFT_ASSIGN': {},
    '.URSHIFT_ASSIGN': {},
    '.Identifier': {},
    '.AT': {},
    '.ELLIPSIS': {},
    '.WS': {},
    '.COMMENT': {},
    '.LINE_COMMENT': {},
};
