let path = require('path');
let antlr = require('antlr4');

// LANGUAGE_RUNTIME_CONFIG_PATH and LANGUAGE_CACHE_DIR are defined in webpack.config.js
let lang_runtime_config = require(LANGUAGE_RUNTIME_CONFIG_PATH);

require(LANGUAGE_CACHE_DIR + '/runtime_config_modifier.js')(lang_runtime_config);

let lexer_classname = lang_runtime_config.language + 'Lexer';
let parser_classname = lang_runtime_config.language + 'Parser';

// Loads the lexer and parser class generated by the antlr compiler.
let LexerClass = require(LANGUAGE_CACHE_DIR + '/' + lexer_classname + '.js')[lexer_classname];
let ParserClass = require(LANGUAGE_CACHE_DIR + '/' + parser_classname + '.js')[parser_classname];

// Loads our custom error listener.
let ErrorListener = require('./error_listener');

// Loads the transformers
let transformers = require('./transformers');


// This is the function that is exposed to the UI.
// It takes a string of code, and returns an abstract syntax tree.
// It combines three external things: the antlr lexer, the antlr parser, and our runtime language config.
module.exports = function(input, error_callback, options) {
    lang_runtime_config.call_options = options || {};

    // Take the string of code, and generate a stream of tokens using the antlr lexer.
    // Example: ['if', '(', 'var', '==', '123', ')', '{', ...]
    let chars = new antlr.InputStream(input);
    let lexer = new LexerClass(chars);
    let tokens = new antlr.CommonTokenStream(lexer);

    // Take the stream of tokens, and create a parser class using the antlr parser.
    // Doesn't execute it yet.
    let parser = new ParserClass(tokens);

    // I don't know what this does
    parser.buildParseTrees = true;

    // Antlr has a default error listener that calls console.error. We need to remove it.
    parser.removeErrorListeners();

    // Add our own error listener
    parser.addErrorListener(new ErrorListener(error_callback));

    // Execute the parser and generate a tree.
    // This tree has complicated nodes that need to be simplified by our process_node function.
    let tree = parser[lang_runtime_config.entry_rule]();

    // Transform the tree and return it
    return transformers(lang_runtime_config, tree);
};

module.exports['rules'] = lang_runtime_config.rules;
