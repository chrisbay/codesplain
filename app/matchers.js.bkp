// Old code, just need to get it commited

let node = require('../app/finalizers.js').matchers.node;
let find = require('../app/finalizers.js').matchers.find;
let term = require('../app/finalizers.js').matchers.term;
let eq = require('../app/finalizers.js').matchers.eq;

let iter;
let begin;
let end;

let matcher = node('for_stmt',
    term('FOR'),
    find(term('NAME', function(val) {iter = val;})),
    term('IN'),
    find(node('trailed_atom',
        find(term('NAME', eq('range'))),
        node('trailer',
            term('OPEN_PAREN'),
            node('arglist',
                find(term('DECIMAL_INTEGER', function(val) {begin = val;})),
                term('COMMA'),
                find(term('DECIMAL_INTEGER', function(val) {end = val;}))
            ),
            term('CLOSE_PAREN')
        )
    ))
);

module.exports.matchers = {};

module.exports.matchers.eq = function(a) {
    return function(b) {return a === b;};
};

module.exports.matchers.find = function(func) {
    return function(n) {
        while (true) {
            if (func(n)) {return true;}
            if (n.children.length === 1
                && n.begin === n.children[0].begin
                && n.end === n.children[0].end
            ) {
                n = n.children[0];
            } else {
                return false;
            }
        }
    };
};

module.exports.matchers.node = function(type) {
    return function(n) {
        if (n.type !== type) {return false;}
        if (arguments.length - 1 !== n.children.length) {return false;}
        let args = Array.prototype.slice.call(arguments, 1);
        return args.every(function(func, index) {
            return func(n.children[index]);
        });
    };
};

module.exports.matchers.term = function(term, callback) {
    return function(n) {
        if (n.type !== '_term') {return false;}
        if (n.term !== term) {return false;}
        if (typeof callback === 'function') {
            return callback(n.text);
        } else {
            return true;
        }
    };
};
